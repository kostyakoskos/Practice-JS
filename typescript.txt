Разработан google
Плюсы typescript- 
1. можно отлавливать ошибки на этапе разработки
2. рефакторить код проще
3. проще работать командой
4. Хорошая документация

Как запустить? Сначала пишем .ts файл. Потом его компилируем компилятором tsc. Потом можно запустить файл .js
компилятором npm .
Браузер не понимает typescript.	

const isFetching: boolean = true; Через двоеточие идет указание типа 

Массивы, есть 2 способа:
const numberArray: Number[] = [1, 1, 2, 3, 5, 8, 13];
const numberArray2: Array<Number> = [1, 1, 2, 3, 5, 8, 13];

Tuple - создать массив из разных  типов
const arr: [string, number] = ['Kostya', 123123];

Any- когда нужно переопределить переменную. Теперь можно с переменной делать все что угодно
let variable: any = 42;
variable = 'New string';

Что функция возвращает? Через двоеточие после параметров пишется тип возвращаемого значения
function sayMayName(name: string): void{
    console.log(name);
}

Never - тип для исключений.

type - можно создавать перменнуые своего типа.
type Login = string;
Можно создавать переменную, которая может принимать 2 типа:
type ID = string | number;
const id1: ID = '123';
const id2: ID = 123;

Привидение типов:
const rect3 = {} as Rect;
const rect4 = <Rect>{};

Равнозначные классы Car и Car2: 
class Car{
    readonly model: string;
    readonly numberOfWheels: number = 4;

    constructor(theModel: string){
        this.model = theModel;
    }
}
class Car2{    
    readonly numberOfWheels: number = 4;
    constructor(readonly model: string) {}
}

Модификаторы доступа класса. Если не пишем некаких модификаторов, то по умолчанию они public.
Protected(для первоначального класса и для классов, которые наследуют этот класс. Если создаем экземпляр класса cat, который наследует animal,
то обращаться к protected полю класса animal нельзя), public, private.

Абстрактные классы. Адстрактные методы.
В абстрактных классах пишем абстрактные методы(которые надо обязательно реализовать в классах-наследниках).
Ключевое слово abstract. 

Generic.


